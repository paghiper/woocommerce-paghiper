{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAqC;AACoB;AACC;AACZ;AAE9C,MAAMM,mBAAmB,GAAG,qFAAqF;;AAEjH;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,gBAAgB,GAAGA,CAAE;EACjCC,mBAAmB,EAAEC,oBAAoB;EACzCC,QAAQ;EACLC;AACJ,CAAC,KAAM;EACN,MAAM,CAAEC,OAAO,EAAEC,UAAU,CAAE,GAAGZ,4DAAQ,CAAE,IAAK,CAAC;EAChD,MAAM,CAAEa,SAAS,EAAEC,YAAY,CAAE,GAAGd,4DAAQ,CAAE,KAAM,CAAC;EAClD,MAAM,CAAEe,UAAU,EAAEC,aAAa,CAAE,GAAGhB,4DAAQ,CAAE,KAAM,CAAC;EAC1D,MAAM,CAAEiB,UAAU,EAAEC,aAAa,CAAE,GAAGlB,4DAAQ,CAACD,mDAAE,CAAC,gBAAgB,EAAE,qBAAqB,CAAC,CAAC;EACxF,MAAM,CAAEoB,UAAU,EAAEC,aAAa,CAAE,GAAGpB,4DAAQ,CAAC,EAAE,CAAC;EACrD,MAAM;IAAEqB,OAAO;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGxB,uEAAiB,CAAE;IACpFyB,QAAQ,EAAE;EACX,CAAE,CAAC;EACH,MAAMC,aAAa,GAAKC,KAAK,IAAM;IAClC,IAAKA,KAAK,CAACJ,KAAK,EAAG;MAClBC,QAAQ,CAAEG,KAAK,CAACJ,KAAK,CAACK,OAAQ,CAAC;IAChC,CAAC,MAAM;MACNJ,QAAQ,CAAE,EAAG,CAAC;IACf;IACAd,UAAU,CAAEiB,KAAK,CAACE,KAAM,CAAC;IACzBtB,QAAQ,CAAEoB,KAAM,CAAC;IAEX,IAAI,CAACA,KAAK,CAACG,MAAM,CAACC,KAAK,EAAG;MACtBrB,UAAU,CAAE,IAAK,CAAC;IACtB;EACJ,CAAC;EAEDX,6DAAS,CAAC,MAAM;IAEZ,IAAGkB,UAAU,CAACe,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,MAAM,GAAG,EAAE,EAAE;MAC1CjB,aAAa,CAACnB,mDAAE,CAAC,iBAAiB,EAAE,qBAAqB,CAAC,CAAC;IAC/D,CAAC,MAAM;MACHmB,aAAa,CAACnB,mDAAE,CAAC,gBAAgB,EAAE,qBAAqB,CAAC,CAAC;IAC9D;IAEA,IAAG,CAACY,OAAO,EAAE;MACT,IAAG,CAACY,OAAO,EAAE;QAET,IAAGJ,UAAU,CAACe,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,MAAM,GAAG,EAAE,IAAIhB,UAAU,CAACe,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,MAAM,GAAG,EAAE,EAAE;UACvFT,QAAQ,CAAC3B,mDAAE,CAAC,uCAAuC,EAAE,qBAAqB,CAAC,CAAC;UAC5Ee,YAAY,CAAC,IAAI,CAAC;QACtB,CAAC,MAAM,IAAIK,UAAU,CAACe,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,MAAM,GAAG,EAAE,EAAE;UAClDT,QAAQ,CAAC3B,mDAAE,CAAC,sCAAsC,EAAE,qBAAqB,CAAC,CAAC;UAC3Ee,YAAY,CAAC,IAAI,CAAC;QACtB;MACJ,CAAC,MAAM;QACH,IAAGK,UAAU,CAACe,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,MAAM,IAAI,EAAE,EAAE;UAC3C;UACA,IAAG,CAAChC,oDAAK,CAACgB,UAAU,CAAC,EAAE;YACnBO,QAAQ,CAAC3B,mDAAE,CAAC,mCAAmC,EAAE,qBAAqB,CAAC,CAAC;YACxEe,YAAY,CAAC,IAAI,CAAC;UACtB,CAAC,MAAM;YACHE,aAAa,CAAC,IAAI,CAAC;UACvB;QACJ,CAAC,MAAM,IAAGG,UAAU,CAACe,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,MAAM,IAAI,EAAE,EAAE;UAClD;UACA,IAAG,CAAC/B,qDAAM,CAACe,UAAU,CAAC,EAAE;YACpBO,QAAQ,CAAC3B,mDAAE,CAAC,wCAAwC,EAAE,qBAAqB,CAAC,CAAC;YAC7Ee,YAAY,CAAC,IAAI,CAAC;UACtB,CAAC,MAAM;YACHE,aAAa,CAAC,IAAI,CAAC;UACvB;QACJ;MACJ;IACJ,CAAC,MAAM;MACHF,YAAY,CAAC,KAAK,CAAC;MACnBE,aAAa,CAAC,KAAK,CAAC;IACxB;EAGJ,CAAC,EAAE,CAACG,UAAU,EAAEI,OAAO,CAAC,CAAC;EAEzBtB,6DAAS,CAAC,MAAM;IACZa,YAAY,CAAC,KAAK,CAAC;IACnBE,aAAa,CAAC,KAAK,CAAC;IACpBU,QAAQ,CAAC,EAAE,CAAC;EAChB,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC;EAEhB,MAAMiB,iBAAiB,GAAGA,CAACC,GAAG,EAAEC,CAAC,KAAK;IAClC,OAAOD,GAAG,CAACH,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,MAAM,GAAG,EAAE,GAAG,oBAAoB,GAAG,iBAAiB;EACxF,CAAC;;EAED;EACAlC,6DAAS,CAAC,MAAM;IAEZ,IAAG,OAAOsC,MAAM,CAAC,kBAAkB,CAAC,CAACC,IAAI,KAAK,UAAU,EAAE;MAEtDD,MAAM,CAAC,kBAAkB,CAAC,CAACC,IAAI,CAACJ,iBAAiB,EAAE;QAC/CK,UAAU,EAAE,SAAAA,CAASJ,GAAG,EAAEC,CAAC,EAAEI,KAAK,EAAErB,OAAO,EAAE;UACzCqB,KAAK,CAACF,IAAI,CAACJ,iBAAiB,CAACO,KAAK,CAAC,CAAC,CAAC,EAAEC,SAAS,CAAC,EAAEvB,OAAO,CAAC;QAC/D;MACJ,CAAC,CAAC;IAEN,CAAC,MAAM;MACHwB,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IACjE;EAEJ,CAAC,EAAE,EAAE,CAAC;EAET,OACCC,oDAAA,CAAAC,2CAAA,QACUD,oDAAA;IAAKE,SAAS,EAAC;EAA0B,GACrCF,oDAAA;IAAKE,SAAS,EAAE,4GAA4G,IAAI3B,QAAQ,IAAI,CAACX,OAAO,GAAG,YAAY,GAAG,EAAE;EAAE,GACtKoC,oDAAA;IACIG,IAAI,EAAC,MAAM;IACXC,EAAE,EAAC,mCAAmC;IACtCC,IAAI,EAAE,GAAG,GAAG1C,WAAW,GAAG,WAAY;IACtCuC,SAAS,EAAG5C,mBAAmB,IAAIM,OAAO,GAAG,qBAAqB,GAAG,EAAE,CAAC,IAAIE,SAAS,GAAG,UAAU,GAAG,EAAE,CAAC,IAAIE,UAAU,GAAG,QAAQ,GAAG,EAAE,CAAE;IACxIsC,MAAM,EAAGA,CAAA,KAAM7B,QAAQ,CAAEb,OAAO,EAAE,KAAM,CAAG;IAC3C2C,OAAO,EAAGA,CAAA,KAAM9B,QAAQ,CAAEb,OAAO,EAAE,IAAK,CAAG;IAC3CF,QAAQ,EAAGmB,aAAe;IAC1B2B,OAAO,EAAGjB,CAAC,IAAIlB,aAAa,CAACkB,CAAC,CAACN,MAAM,CAACC,KAAK,CAAG;IAC9C,cAAahB,UAAY;IACzBuC,QAAQ;IACRC,KAAK;EAAA,CACR,CAAC,EACFV,oDAAA;IAAOW,OAAO,EAAC;EAAmC,GAAGzC,UAAmB,CAAC,EACzE8B,oDAAA,CAACvC,oBAAoB;IAACmD,YAAY,EAAGlC;EAAO,CAAE,CAC7C,CACJ,CACb,CAAC;AAEL,CAAC;;;;;;;;;;;;;;;;ACxIqE;;AAEtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoC,gBAAgB,GAAGA,CAAEC,QAAQ,EAAEC,QAAQ,EAAEC,YAAY,KAAM;EAChE,IAAIC,YAAY,GAAG,CAAC,CAAC;EAErB,IACC,OAAOC,QAAQ,KAAK,QAAQ,IAC5B,OAAOA,QAAQ,CAACC,aAAa,KAAK,UAAU,IAC5C,OAAOC,MAAM,CAACP,gBAAgB,KAAK,UAAU,EAC5C;IACD,MAAMQ,OAAO,GAAGH,QAAQ,CAACC,aAAa,CAAEL,QAAS,CAAC;IAClD,IAAKO,OAAO,EAAG;MACdJ,YAAY,GAAGG,MAAM,CAACP,gBAAgB,CAAEQ,OAAQ,CAAC;IAClD;EACD;EAEA,OAAOJ,YAAY,CAAEF,QAAQ,CAAE,IAAIC,YAAY;AAChD,CAAC;;AAED;AACA;AACA;AACA,MAAMM,cAAc,GAAG;EACtBC,KAAK,EAAE;IACNC,IAAI,EAAE;MACLC,SAAS,EAAE,SAAS;MACpBC,KAAK,EAAE,SAAS;MAChBC,QAAQ,EAAEd,gBAAgB,CACzB,oBAAoB,EACpB,UAAU,EACV,MACD,CAAC;MACDe,UAAU,EAAE,KAAK;MAAE;MACnB,eAAe,EAAE;QAChBF,KAAK,EAAE;MACR;IACD;EACD,CAAC;EACDG,OAAO,EAAE;IACRC,KAAK,EAAE,SAAS;IAChB/C,KAAK,EAAE,OAAO;IACdgD,OAAO,EAAE;EACV;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM7E,iBAAiB,GAAK8E,iBAAiB,IAAM;EACzD,MAAM,CAAE1D,QAAQ,EAAE2D,WAAW,CAAE,GAAGjF,4DAAQ,CAAE,KAAM,CAAC;EACnD,MAAM,CAAEuB,OAAO,EAAE2D,UAAU,CAAE,GAAGlF,4DAAQ,CAAE,KAAM,CAAC;EACjD,MAAM,CAAEqB,OAAO,EAAE8D,UAAU,CAAE,GAAGnF,4DAAQ,CAAE;IACzC,GAAGsE,cAAc;IACjB,GAAGU;EACJ,CAAE,CAAC;EACH,MAAM,CAAEvD,KAAK,EAAEC,QAAQ,CAAE,GAAG1B,4DAAQ,CAAE,EAAG,CAAC;EAE1CC,6DAAS,CAAE,MAAM;IAChB,MAAMyE,KAAK,GAAGpD,QAAQ,GAAG,SAAS,GAAG,MAAM;IAE3C6D,UAAU,CAAIC,WAAW,IAAM;MAC9B,IAAIC,QAAQ;MACZ;MACA,IAAKD,WAAW,CAACC,QAAQ,KAAK,KAAK,EAAG;QACrCA,QAAQ,GAAG;UAAEA,QAAQ,EAAE;QAAM,CAAC;MAC/B,CAAC,MAAM,IAAK,OAAOD,WAAW,CAACC,QAAQ,KAAK,WAAW,EAAG;QACzDA,QAAQ,GAAG;UAAEA,QAAQ,EAAE/D;QAAS,CAAC;MAClC,CAAC,MAAM;QACN+D,QAAQ,GAAG,CAAC,CAAC;MACd;MACA,OAAO;QACN,GAAGD,WAAW;QACdb,KAAK,EAAE;UACN,GAAGa,WAAW,CAACb,KAAK;UACpBC,IAAI,EAAE;YACL,GAAGY,WAAW,CAACb,KAAK,CAACC,IAAI;YACzB,eAAe,EAAE;cAChBE;YACD;UACD;QACD,CAAC;QACD,GAAGW;MACJ,CAAC;IACF,CAAE,CAAC;EACJ,CAAC,EAAE,CAAE/D,QAAQ,CAAG,CAAC;EAEjB,MAAME,QAAQ,GAAGoC,+DAAW,CAC3B,CAAEjD,OAAO,EAAEY,OAAO,KAAM;IACvB,IAAK,CAAEZ,OAAO,EAAG;MAChBsE,WAAW,CAAE,IAAK,CAAC;IACpB,CAAC,MAAM;MACNA,WAAW,CAAIK,UAAU,IAAM,CAAEA,UAAW,CAAC;IAC9C;IAEA,IAAG/D,OAAO,EAAE;MACX2D,UAAU,CAAC,IAAI,CAAC;IACjB,CAAC,MAAM;MACNA,UAAU,CAAC,KAAK,CAAC;IAClB;EACD,CAAC,EACD,CAAED,WAAW,EAAEC,UAAU,CAC1B,CAAC;EACD,OAAO;IAAE7D,OAAO;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAS,CAAC;AACjE,CAAC;;;;;;;;;;AC3HY;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY,GAAG,YAAY,GAAG,gBAAgB,GAAG,sBAAsB,GAAG,UAAU;AACpF,4CAA4C,mBAAO,CAAC,6FAA0B;AAC9E,gBAAgB,mBAAO,CAAC,2DAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,IAAI,EAAE,IAAI;AACxB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,EAAE,uBAAuB;AAClD;AACA;AACA;AACA;AACA,YAAY;AACZ,kBAAe;AACf;;;;;;;;;;AC1Ia;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,sBAAsB,GAAG,YAAY,GAAG,YAAY,GAAG,UAAU;AACpF,4CAA4C,mBAAO,CAAC,6FAA0B;AAC9E,gBAAgB,mBAAO,CAAC,2DAAS;AACjC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,IAAI,EAAE,IAAI;AACxB;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,IAAI,EAAE,qBAAqB;AAC/C;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,kBAAe;AACf;;;;;;;;;;ACjIa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,sBAAsB,GAAG,YAAY,GAAG,YAAY,GAAG,UAAU;AACpF,4CAA4C,mBAAO,CAAC,6FAA0B;AAC9E,gBAAgB,mBAAO,CAAC,2DAAS;AACjC;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,IAAI,EAAE,IAAI;AACxB;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,mBAAmB,IAAI,EAAE,qBAAqB;AAC9C;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,kBAAe;AACf;;;;;;;;;;AClJa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA,kBAAe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;ACTa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,oBAAoB,GAAG,aAAa,GAAG,yBAAyB,GAAG,aAAa,GAAG,cAAc,GAAG,aAAa;AACjL,cAAc,mBAAO,CAAC,uDAAO;AAC7B,eAAe,mBAAO,CAAC,yDAAQ;AAC/B,cAAc,mBAAO,CAAC,uDAAO;AAC7B,0BAA0B,mBAAO,CAAC,+EAAmB;AACrD,gBAAgB,mBAAO,CAAC,2DAAS;AACjC,mBAAmB,mBAAO,CAAC,iEAAY;AACvC,qBAAqB,mBAAO,CAAC,qEAAc;AAC3C,kBAAkB,mBAAO,CAAC,+DAAW;AACrC,wBAAwB,mBAAO,CAAC,2EAAiB;AACjD;AACA,aAAa;AACb;AACA,cAAc;AACd;AACA,aAAa;AACb;AACA,yBAAyB;AACzB;AACA,aAAa;AACb;AACA,oBAAoB;AACpB;AACA,iBAAiB;AACjB;AACA,uBAAuB;AACvB;AACA,eAAe;AACf,kBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACzCa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,gBAAgB,GAAG,sBAAsB,GAAG,YAAY,GAAG,YAAY,GAAG,UAAU;AAC3G,4CAA4C,mBAAO,CAAC,6FAA0B;AAC9E,gBAAgB,mBAAO,CAAC,2DAAS;AACjC;AACA;AACA;AACA;AACA;AACA,iEAAiE,sCAAsC;AACvG;AACA;AACA;AACA,kCAAkC,UAAU,iBAAiB,EAAE,aAAa,QAAQ,EAAE,OAAO;AAC7F;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA,sBAAsB,QAAQ,EAAE,QAAQ;AACxC;AACA,+BAA+B,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,kBAAe;AACf;;;;;;;;;;AC7La;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,sBAAsB,GAAG,YAAY,GAAG,YAAY,GAAG,UAAU;AACpF,4CAA4C,mBAAO,CAAC,6FAA0B;AAC9E,gBAAgB,mBAAO,CAAC,2DAAS;AACjC;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,qDAAqD,sCAAsC;AAC3F;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI,EAAE,IAAI;AACxB;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA,mBAAmB,IAAI,EAAE,6BAA6B;AACtD;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,kBAAe;AACf;AACA;AACA;AACA,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B;AACA;AACA;AACA;AACA;;;;;;;;;;AC1Ja;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,sBAAsB,GAAG,YAAY,GAAG,YAAY,GAAG,UAAU;AACpF,4CAA4C,mBAAO,CAAC,6FAA0B;AAC9E,gBAAgB,mBAAO,CAAC,2DAAS;AACjC;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,mBAAmB,IAAI,EAAE,qBAAqB;AAC9C;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,kBAAe;AACf;;;;;;;;;;AC7Ha;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,sBAAsB,GAAG,YAAY,GAAG,YAAY,GAAG,UAAU;AACpF,4CAA4C,mBAAO,CAAC,6FAA0B;AAC9E,gBAAgB,mBAAO,CAAC,2DAAS;AACjC;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,KAAK,OAAO,OAAO;AAClD;AACA,UAAU,gBAAgB;AAC1B,UAAU,gBAAgB;AAC1B;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,4BAA4B,EAAE,4BAA4B,EAAE,IAAI,EAAE,qBAAqB;AACjH;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,iBAAiB,EAAE,MAAM,EAAE,OAAO,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,kBAAe;AACf;;;;;;;;;;ACvIa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,sBAAsB,GAAG,YAAY,GAAG,YAAY,GAAG,UAAU;AACpF,4CAA4C,mBAAO,CAAC,6FAA0B;AAC9E,gBAAgB,mBAAO,CAAC,2DAAS;AACjC;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,IAAI;AAClB;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,MAAM,EAAE,uBAAuB;AACtD;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,kBAAe;AACf;;;;;;;;;;ACzHa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,sBAAsB,GAAG,YAAY,GAAG,YAAY,GAAG,UAAU;AACpF,4CAA4C,mBAAO,CAAC,6FAA0B;AAC9E,gBAAgB,mBAAO,CAAC,2DAAS;AACjC;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,IAAI,EAAE,IAAI;AACxB;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,sBAAsB,IAAI,EAAE,GAAG,EAAE,0BAA0B;AAC3D;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,kBAAe;AACf;;;;;;;;;;AC9Ia;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,iBAAiB,GAAG,0BAA0B,GAAG,wBAAwB,GAAG,kBAAkB,GAAG,kBAAkB,GAAG,gCAAgC,GAAG,4BAA4B,GAAG,eAAe;AAC9N,4CAA4C,mBAAO,CAAC,6FAA0B;AAC9E;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA,cAAc,6BAA6B,EAAE,YAAY,EAAE,0BAA0B;AACrF;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA,8CAA8C,0CAA0C;AACxF;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;;;;;;;;;;AC9LA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAE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","sources":["webpack://paghiper-checkout-block/./src/elements.js","webpack://paghiper-checkout-block/./src/use-element-options.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/cnh.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/cnpj.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/cpf.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/data/ValidationBRError.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/index.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/judicialProcess.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/nup17.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/pisPasep.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/postalCode.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/renavam.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/tituloEleitor.js","webpack://paghiper-checkout-block/./node_modules/validation-br/dist/utils.js","webpack://paghiper-checkout-block/external window \"React\"","webpack://paghiper-checkout-block/external window [\"wc\",\"blocksCheckout\"]","webpack://paghiper-checkout-block/external window [\"wc\",\"wcBlocksRegistry\"]","webpack://paghiper-checkout-block/external window [\"wc\",\"wcSettings\"]","webpack://paghiper-checkout-block/external window [\"wp\",\"element\"]","webpack://paghiper-checkout-block/external window [\"wp\",\"htmlEntities\"]","webpack://paghiper-checkout-block/external window [\"wp\",\"i18n\"]","webpack://paghiper-checkout-block/webpack/bootstrap","webpack://paghiper-checkout-block/webpack/runtime/compat get default export","webpack://paghiper-checkout-block/webpack/runtime/define property getters","webpack://paghiper-checkout-block/webpack/runtime/hasOwnProperty shorthand","webpack://paghiper-checkout-block/webpack/runtime/make namespace object","webpack://paghiper-checkout-block/./src/index.js"],"sourcesContent":["import { __ } from '@wordpress/i18n';\nimport { useState, useEffect } from '@wordpress/element';\nimport { useElementOptions } from './use-element-options';\nimport { isCPF, isCNPJ } from 'validation-br';\n\nconst baseTextInputStyles = 'wc-block-gateway-input paghiper_tax_id p-Input-input Input p-Input-input--textRight';\n\n/**\n * InlineTaxIdField component\n *\n * @param {Object} props Incoming props for the component.\n * @param {React.ReactElement} props.inputErrorComponent\n * @param {function(any):any} props.onChange\n */\nexport const InlineTaxIdField = ( {\n\tinputErrorComponent: ValidationInputError,\n\tonChange,\n    gatewayName\n} ) => {\n\tconst [ isEmpty, setIsEmpty ] = useState( true );\n\tconst [ isInvalid, setIsInvalid ] = useState( false );\n    const [ isComplete, setIsComplete ] = useState( false );\n\tconst [ fieldLabel, setFieldLabel ] = useState(__('CPF do Pagador', 'woo-boleto-paghiper'));\n    const [ fieldInput, setFieldInput ] = useState('');\n\tconst { options, isActive, isFocus, onActive, error, setError } = useElementOptions( {\n\t\thideIcon: true,\n\t} );\n\tconst errorCallback = ( event ) => {\n\t\tif ( event.error ) {\n\t\t\tsetError( event.error.message );\n\t\t} else {\n\t\t\tsetError( '' );\n\t\t}\n\t\tsetIsEmpty( event.empty );\n\t\tonChange( event );\n\n        if( !event.target.value ) {\n            setIsEmpty( true );\n        }\n    }\n\n    useEffect(() => {\n\n        if(fieldInput.replace(/\\D/g, '').length > 11) {\n            setFieldLabel(__('CNPJ do Pagador', 'woo-boleto-paghiper'));\n        } else {\n            setFieldLabel(__('CPF do Pagador', 'woo-boleto-paghiper'));\n        }\n\n        if(!isEmpty) {\n            if(!isFocus) {\n\n                if(fieldInput.replace(/\\D/g, '').length > 11 && fieldInput.replace(/\\D/g, '').length < 14) {\n                    setError(__('O número do seu CNPJ está incompleto.', 'woo-boleto-paghiper'));\n                    setIsInvalid(true);\n                } else if (fieldInput.replace(/\\D/g, '').length < 11) {\n                    setError(__('O número do seu CPF está incompleto.', 'woo-boleto-paghiper'));\n                    setIsInvalid(true);\n                }\n            } else {\n                if(fieldInput.replace(/\\D/g, '').length == 11) {\n                    // Valida CPF\n                    if(!isCPF(fieldInput)) {\n                        setError(__('O número do seu CPF está correto.', 'woo-boleto-paghiper'));\n                        setIsInvalid(true);\n                    } else {\n                        setIsComplete(true);\n                    }\n                } else if(fieldInput.replace(/\\D/g, '').length == 14) {\n                    // Valida CNPJ\n                    if(!isCNPJ(fieldInput)) {\n                        setError(__('O número do seu CNPJ não está correto.', 'woo-boleto-paghiper'));\n                        setIsInvalid(true);\n                    } else {\n                        setIsComplete(true);\n                    }\n                }\n            }\n        } else {\n            setIsInvalid(false);\n            setIsComplete(false);\n        }\n\n\n    }, [fieldInput, isFocus]);\n\n    useEffect(() => {\n        setIsInvalid(false);\n        setIsComplete(false);\n        setError('');\n    }, [fieldInput]);\n\n    const taxIdMaskBehavior = (val, e) => {\n        return val.replace(/\\D/g, '').length > 11 ? '00.000.000/0000-00' : '000.000.000-009';\n    }\n\n    // Initialize mask everytime we render the component\n    useEffect(() => {\n\n        if(typeof jQuery('.paghiper_tax_id').mask === \"function\") {\n\n            jQuery('.paghiper_tax_id').mask(taxIdMaskBehavior, {\n                onKeyPress: function(val, e, field, options) {\n                    field.mask(taxIdMaskBehavior.apply({}, arguments), options);\n                }\n            });\n\n        } else {\n            console.log('Paghiper block failed to initialize TaxID mask')\n        }\n\t\n    }, [])\n\n\treturn (\n\t\t<>\n            <div className=\"wc-block-components-form\">\n                <div className={\"wc-block-gateway-container wc-block-components-text-input wc-inline-tax-id-element paghiper-taxid-fieldset\" + (isActive || !isEmpty ? ' is-active' : '')}>\n                    <input \n                        type=\"text\"\n                        id=\"wc-paghiper-inline-tax-id-element\"\n                        name={\"_\" + gatewayName + \"_cpf_cnpj\"}\n                        className={ baseTextInputStyles + (isEmpty ? ' empty Input--empty' : '') + (isInvalid ? ' invalid' : '') + (isComplete ? ' valid' : '')}\n                        onBlur={ () => onActive( isEmpty, false ) }\n                        onFocus={ () => onActive( isEmpty, true ) }\n                        onChange={ errorCallback }\n                        onInput={ e => setFieldInput(e.target.value) }\n                        aria-label={ fieldLabel }\n                        required\n                        title\n                    />\n                    <label htmlFor=\"wc-paghiper-inline-tax-id-element\">{ fieldLabel }</label>\n                    <ValidationInputError errorMessage={ error } />\n                </div>\n            </div>\n\t\t</>\n\t);\n};","import { useState, useEffect, useCallback } from '@wordpress/element';\n\n/**\n * @typedef {import('../stripe-utils/type-defs').StripeElementOptions} StripeElementOptions\n */\n\n/**\n * Returns the value of a specific CSS property for the element matched by the provided selector.\n *\n * @param {string} selector     CSS selector that matches the element to query.\n * @param {string} property     Name of the property to retrieve the style\n *                              value from.\n * @param {string} defaultValue Fallback value if the value for the property\n *                              could not be retrieved.\n *\n * @return {string} The style value of that property in the document element.\n */\nconst getComputedStyle = ( selector, property, defaultValue ) => {\n\tlet elementStyle = {};\n\n\tif (\n\t\ttypeof document === 'object' &&\n\t\ttypeof document.querySelector === 'function' &&\n\t\ttypeof window.getComputedStyle === 'function'\n\t) {\n\t\tconst element = document.querySelector( selector );\n\t\tif ( element ) {\n\t\t\telementStyle = window.getComputedStyle( element );\n\t\t}\n\t}\n\n\treturn elementStyle[ property ] || defaultValue;\n};\n\n/**\n * Default options for the stripe elements.\n */\nconst elementOptions = {\n\tstyle: {\n\t\tbase: {\n\t\t\ticonColor: '#666EE8',\n\t\t\tcolor: '#31325F',\n\t\t\tfontSize: getComputedStyle(\n\t\t\t\t'.wc-block-checkout',\n\t\t\t\t'fontSize',\n\t\t\t\t'16px'\n\t\t\t),\n\t\t\tlineHeight: 1.375, // With a font-size of 16px, line-height will be 22px.\n\t\t\t'::placeholder': {\n\t\t\t\tcolor: '#fff',\n\t\t\t},\n\t\t},\n\t},\n\tclasses: {\n\t\tfocus: 'focused',\n\t\tempty: 'empty',\n\t\tinvalid: 'has-error',\n\t},\n};\n\n/**\n * A custom hook handling options implemented on the stripe elements.\n *\n * @param {Object} [overloadedOptions] An array of extra options to merge with\n *                                     the options provided for the element.\n *\n * @return {StripeElementOptions}  The stripe element options interface\n */\nexport const useElementOptions = ( overloadedOptions ) => {\n\tconst [ isActive, setIsActive ] = useState( false );\n\tconst [ isFocus, setIsFocus ] = useState( false );\n\tconst [ options, setOptions ] = useState( {\n\t\t...elementOptions,\n\t\t...overloadedOptions,\n\t} );\n\tconst [ error, setError ] = useState( '' );\n\n\tuseEffect( () => {\n\t\tconst color = isActive ? '#CFD7E0' : '#fff';\n\n\t\tsetOptions( ( prevOptions ) => {\n\t\t\tlet showIcon;\n\t\t\t// forced when disabling co-badged cards (for Sources API)\n\t\t\tif ( prevOptions.showIcon === false ) {\n\t\t\t\tshowIcon = { showIcon: false };\n\t\t\t} else if ( typeof prevOptions.showIcon !== 'undefined' ) {\n\t\t\t\tshowIcon = { showIcon: isActive };\n\t\t\t} else {\n\t\t\t\tshowIcon = {};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...prevOptions,\n\t\t\t\tstyle: {\n\t\t\t\t\t...prevOptions.style,\n\t\t\t\t\tbase: {\n\t\t\t\t\t\t...prevOptions.style.base,\n\t\t\t\t\t\t'::placeholder': {\n\t\t\t\t\t\t\tcolor,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t...showIcon,\n\t\t\t};\n\t\t} );\n\t}, [ isActive ] );\n\n\tconst onActive = useCallback(\n\t\t( isEmpty, isFocus ) => {\n\t\t\tif ( ! isEmpty ) {\n\t\t\t\tsetIsActive( true );\n\t\t\t} else {\n\t\t\t\tsetIsActive( ( prevActive ) => ! prevActive );\n\t\t\t}\n\n\t\t\tif(isFocus) {\n\t\t\t\tsetIsFocus(true);\n\t\t\t} else {\n\t\t\t\tsetIsFocus(false);\n\t\t\t}\n\t\t},\n\t\t[ setIsActive, setIsFocus ]\n\t);\n\treturn { options, isActive, isFocus, onActive, error, setError };\n};\n","\"use strict\";\r\n/**\r\n * isCNH()\r\n * Calcula se uma CNH é válida\r\n *\r\n * @doc\r\n * CNH deve possuir 11 caracteres\r\n *\r\n * - Os caracteres 1 a 9 são números sequenciais.\r\n *\r\n *\r\n * - Os caracteres 10 e 11 são dígitos verificadores.\r\n *\r\n * 1) Partes do número\r\n *  ____________________________ ______\r\n * |  Número                    | D V |\r\n * |  5  8  3  1  6  7  9  4  5   3 4 |\r\n * |____________________________|_____|\r\n *\r\n * 2) Cálculo do primeiro DV.\r\n *\r\n *  - Soma-se o produto das algarismos 1 a 9 pelos números 2, 3, 4, 5, 6, 7, 8, 9, 10.\r\n *\r\n *    5   8   3   1   6   7   9   4   5\r\n *    x   x   x   x   x   x   x   x   x\r\n *    2   3   4   5   6   7   8   9   10\r\n * = 10 +24 +12  +5 +36 +49 +72 +36  +50  = 294\r\n *\r\n *  - O somatório encontrado é dividido por 11. O DV1 é 11 subtraído do resto da divisão. Se o\r\n *    resto for 10, o DV1 é 0.\r\n *\r\n * 2.1) 294 / 11 tem resto igual a 8. 11-7 = 3\r\n *      DV1 = 3\r\n *\r\n * 3) Cálculo do segundo DV\r\n *\r\n *  - Soma-se o produto das algarismos 1 a 9 juntamente com o 10 caractere\r\n *    que é o DV1, pelos números 3, 4, 5, 6, 7, 8, 9, 10, 11, 2. O DV1 será\r\n *    multiplicado por 2 e ficará no final.\r\n *\r\n *    5   8   3   1   6   7   9   4   5   3\r\n *    x   x   x   x   x   x   x   x   x   x\r\n *    3   4   5   6   7   8   9  10  11   2\r\n * = 10 +24 +12  +5 +36 +49 +72 +36 +50  +6  =  348\r\n *\r\n * 3.1) 348 / 11 tem resto igual a 7. 11 - 7 = 4.\r\n *      DV2 = 4\r\n *\r\n *  - O somatório encontrado é dividido por 11. O DV2 é 11 subtraído do resto da divisão. Se o\r\n *    resto for 10, o DV2 é 0.\r\n *\r\n * Fonte: https://www.devmedia.com.br/forum/validacao-de-cnh/372972\r\n *\r\n * @param {String} value Título eleitoral\r\n * @returns {Boolean}\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fake = exports.mask = exports.validate = exports.validateOrFail = exports.dv = void 0;\r\nconst ValidationBRError_1 = __importDefault(require(\"./data/ValidationBRError\"));\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n * Calcula o Dígito Verificador de um RENAVAM informado\r\n *\r\n * @returns String Número fake de um cnh válido\r\n */\r\nconst dv = (value) => {\r\n    const cnh = (0, utils_1.clearValue)(value, 9, {\r\n        trimAtRight: true,\r\n        rejectEmpty: true,\r\n    });\r\n    const sum1 = (0, utils_1.sumElementsByMultipliers)(cnh.substring(0, 9), [2, 3, 4, 5, 6, 7, 8, 9, 10]);\r\n    const dv1 = (0, utils_1.sumToDV)(sum1);\r\n    const sum2 = (0, utils_1.sumElementsByMultipliers)(cnh.substring(0, 9) + dv1, [3, 4, 5, 6, 7, 8, 9, 10, 11, 2]);\r\n    const dv2 = (0, utils_1.sumToDV)(sum2);\r\n    return `${dv1}${dv2}`;\r\n};\r\nexports.dv = dv;\r\n/**\r\n * validateOrFail()\r\n * Valida se um número é válido e\r\n * retorna uma exceção se não estiver\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validateOrFail = (value) => {\r\n    const cnh = (0, utils_1.clearValue)(value, 11, {\r\n        fillZerosAtLeft: true,\r\n        rejectEmpty: true,\r\n        rejectHigherLength: true,\r\n        rejectEqualSequence: true,\r\n    });\r\n    if ((0, exports.dv)(cnh) !== cnh.substring(9, 11)) {\r\n        throw ValidationBRError_1.default.INVALID_DV;\r\n    }\r\n    return true;\r\n};\r\nexports.validateOrFail = validateOrFail;\r\n/**\r\n * validate()\r\n * Valida se um número é válido\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validate = (value) => {\r\n    try {\r\n        return (0, exports.validateOrFail)(value);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.validate = validate;\r\n/**\r\n * Aplica uma máscara a uma string\r\n *\r\n * @returns String string com a máscara aplicada\r\n */\r\nconst mask = (value) => (0, utils_1.applyMask)(value, '000000000-00');\r\nexports.mask = mask;\r\n/**\r\n * Cria um número fake\r\n *\r\n * @returns String Número fake porém válido\r\n */\r\nconst fake = (withMask = false) => {\r\n    const value = (0, utils_1.fakeNumber)(9, true);\r\n    const cnh = `${value}${(0, exports.dv)(value)}`;\r\n    if (withMask)\r\n        return (0, exports.mask)(cnh);\r\n    return cnh;\r\n};\r\nexports.fake = fake;\r\nexports.default = exports.validate;\r\n//# sourceMappingURL=cnh.js.map","\"use strict\";\r\n/**\r\n * isCNPJ()\r\n * Calcula se um CNPJ é válido\r\n *\r\n * @doc\r\n * - CNPJ deve possuir 14 dígitos no formato 00.000.000/0000-00\r\n *\r\n * - Os caracteres 1 a 8 são números sequenciais definidos pela Receita Federal\r\n *\r\n * - Os caracteres 9 a 12 são a identificação das filiais da empresa.\r\n *\r\n * - Os caracteres 13 e 14 são os dígitos verificadores\r\n *\r\n * 1) Partes do número\r\n *  _______________________________ _______________ _______\r\n * | Número                        |    Filiais    |  DV   |\r\n * | 1   1 . 2   2   2 . 3   3   3 / 0   0   0   1 - X   Y |\r\n * |_______________________________|_______________|_______|\r\n *\r\n * 2) Cálculo do primeiro DV.\r\n *\r\n *  - Soma-se o produto das algarismos 1 a 12 pelos números 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2\r\n *\r\n *    1   1   2   2   2   3   3   3   0   0   0   1\r\n *    x   x   x   x   x   x   x   x   x   x   x   x\r\n *    5   4   3   2   9   8   7   6   5   4   3   2\r\n * =  5  +4  +6  +4 +18 +24 +21 +18  +0  +0  +0  +2 = 102\r\n *\r\n *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11\r\n *    102 / 11 tem resto 8. 11 - 3 = 8. DV1 é 8.\r\n *    Obs.: Caso o cálculo de DV1 retorne 10, o resultado será 0.\r\n *\r\n * 3) Cálculo do segundo DV.\r\n *\r\n *  - Soma-se o produto das algarismos 1 a 13 (incluindo o DV1 calculado) pelos\r\n *    números 6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2.\r\n *\r\n *    1   1   2   2   2   3   3   3   0   0   0   1   8\r\n *    x   x   x   x   x   x   x   x   x   x   x   x   x\r\n *    6   5   4   3   2   9   8   7   6   5   4   3   2\r\n * =  6  +5  +8  +6  +4 +27 +24 +21  +0  +0  +0  +3 +16 = 120\r\n *\r\n *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11\r\n *    120 / 11 tem resto 10. 11 - 10 = 1. DV2 é 1.\r\n *    Obs.: Caso o cálculo de DV2 retorne 10, o resultado será 0.\r\n *\r\n * Fonte: http://www.macoratti.net/alg_cnpj.htm\r\n *\r\n * @param {String} value Título eleitoral\r\n * @returns {Boolean}\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;\r\nconst ValidationBRError_1 = __importDefault(require(\"./data/ValidationBRError\"));\r\nconst utils_1 = require(\"./utils\");\r\nconst dv = (value) => {\r\n    const cnpj = (0, utils_1.clearValue)(value, 12, {\r\n        trimAtRight: true,\r\n        rejectEmpty: true,\r\n    });\r\n    const sum1 = (0, utils_1.sumElementsByMultipliers)(cnpj.substring(0, 12), '543298765432');\r\n    const dv1 = (0, utils_1.sumToDV)(sum1);\r\n    const sum2 = (0, utils_1.sumElementsByMultipliers)(cnpj.substring(0, 12) + dv1, '6543298765432');\r\n    const dv2 = (0, utils_1.sumToDV)(sum2);\r\n    return `${dv1}${dv2}`;\r\n};\r\nexports.dv = dv;\r\n/**\r\n * Aplica uma máscara ao número informado\r\n *\r\n * @param {String} value Número de Processo\r\n * @returns {String} Valor com a máscara\r\n */\r\nconst mask = (value) => (0, utils_1.applyMask)(value, '00.000.000/0000-00');\r\nexports.mask = mask;\r\n/**\r\n *\r\n *\r\n */\r\nconst fake = (withMask = false) => {\r\n    const num = (0, utils_1.fakeNumber)(12, true);\r\n    const cnpj = `${num}${(0, exports.dv)(num)}`;\r\n    if (withMask)\r\n        return (0, exports.mask)(cnpj);\r\n    return cnpj;\r\n};\r\nexports.fake = fake;\r\n/**\r\n * validateOrFail()\r\n * Valida se um número é válido e\r\n * retorna uma exceção se não estiver\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validateOrFail = (value) => {\r\n    const cnpj = (0, utils_1.clearValue)(value, 14, {\r\n        fillZerosAtLeft: true,\r\n        rejectEmpty: true,\r\n        rejectHigherLength: true,\r\n        rejectEqualSequence: true,\r\n    });\r\n    if ((0, exports.dv)(cnpj) !== cnpj.substring(12, 14)) {\r\n        throw ValidationBRError_1.default.INVALID_DV;\r\n    }\r\n    return true;\r\n};\r\nexports.validateOrFail = validateOrFail;\r\n/**\r\n * validate()\r\n * Valida se um número é válido\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validate = (value) => {\r\n    try {\r\n        return (0, exports.validateOrFail)(value);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.validate = validate;\r\nexports.default = exports.validate;\r\n//# sourceMappingURL=cnpj.js.map","\"use strict\";\r\n/**\r\n * isCPF()\r\n * Calcula se um CPF é válido\r\n *\r\n * @doc\r\n * CPF deve possuir 11 dígitos.\r\n *\r\n * - Os caracteres 1 a 8 são números sequenciais definidos pela Receita Federal\r\n *\r\n * - O caractere 9 refere-se à região fiscal emissora do documento\r\n *    1 – DF, GO, MS, MT e TO\r\n *    2 – AC, AM, AP, PA, RO e RR\r\n *    3 – CE, MA e PI\r\n *    4 – AL, PB, PE, RN\r\n *    5 – BA e SE\r\n *    6 – MG\r\n *    7 – ES e RJ\r\n *    8 – SP\r\n *    9 – PR e SC\r\n *    0 – RS\r\n *\r\n * - Os caracteres 10 e 11 são dígitos verificadores.\r\n *\r\n * 1) Partes do número\r\n * ------------------------------------------------\r\n * | Número                       | R |  DV  |\r\n *  2   8   0 . 0   1   2 . 3   8   9 - 3   8\r\n *\r\n * 2) Cálculo do primeiro DV.\r\n *\r\n *  - Soma-se o produto das algarismos 1 a 9 pelos números 10, 9, 8, 7, 6, 5, 4, 3, 2\r\n *\r\n *    2   8   0   0   1   2   3   8   9\r\n *    x   x   x   x   x   x   x   x   x\r\n *   10   9   8   7   6   5   4   3   2\r\n * = 20 +72  +0  +0  +6 +10 +12 +24 +18 = 162\r\n *\r\n *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11\r\n *    162 / 11 tem resto 8. 11 - 8 = 3. DV1 é 3.\r\n *    Obs.: Caso o cálculo de DV1 retorne 10, o resultado será 0.\r\n *\r\n * 3) Cálculo do segundo DV.\r\n *\r\n *  - Soma-se o produto das algarismos 1 a 10 pelos números 11, 10, 9, 8, 7, 6, 5, 4, 3, 2\r\n *\r\n *    2   8   0   0   1   2   3   8   9   3\r\n *    x   x   x   x   x   x   x   x   x   x\r\n *   11  10   9   8   7   6   5   4   3   2\r\n * = 22 +80  +0  +0  +7 +12 +15 +32 +27 = 201\r\n *\r\n *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11\r\n *    201 / 11 tem resto 3. 11 - 3 = 8. DV2 é 8.\r\n *    Obs.: Caso o cálculo de DV2 retorne 10, o resultado será 0.\r\n *\r\n * Fonte: http://clubes.obmep.org.br/blog/a-matematica-nos-documentos-cpf/\r\n *\r\n * @param {String} value Título eleitoral\r\n * @returns {Boolean}\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;\r\nconst ValidationBRError_1 = __importDefault(require(\"./data/ValidationBRError\"));\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n * dv()\r\n * Calcula o dígito verificador\r\n *\r\n * @param {Number|String} value\r\n * @returns {String}\r\n */\r\nconst dv = (value) => {\r\n    const cpf = (0, utils_1.clearValue)(value, 9, {\r\n        trimAtRight: true,\r\n        rejectEmpty: true,\r\n    });\r\n    const sum1 = (0, utils_1.sumElementsByMultipliers)(cpf, [10, 9, 8, 7, 6, 5, 4, 3, 2]);\r\n    const dv1 = (0, utils_1.sumToDV)(sum1);\r\n    const sum2 = (0, utils_1.sumElementsByMultipliers)(cpf + dv1, [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]);\r\n    const dv2 = (0, utils_1.sumToDV)(sum2);\r\n    return `${dv1}${dv2}`;\r\n};\r\nexports.dv = dv;\r\n/**\r\n * Aplica uma máscara ao número informado\r\n *\r\n * @param {String} value Número de Processo\r\n * @returns {String} Valor com a máscara\r\n */\r\nconst mask = (value) => (0, utils_1.applyMask)(value, '000.000.000-00');\r\nexports.mask = mask;\r\n/**\r\n * fake()\r\n * Gera um número válido\r\n *\r\n * @returns {String}\r\n */\r\nconst fake = (withMask = false) => {\r\n    const num = (0, utils_1.fakeNumber)(9, true);\r\n    const cpf = `${num}${(0, exports.dv)(num)}`;\r\n    if (withMask)\r\n        return (0, exports.mask)(cpf);\r\n    return cpf;\r\n};\r\nexports.fake = fake;\r\n/**\r\n * validateOrFail()\r\n * Valida se um número é válido e\r\n * retorna uma exceção se não estiver\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validateOrFail = (value) => {\r\n    const cpf = (0, utils_1.clearValue)(value, 11, {\r\n        fillZerosAtLeft: true,\r\n        rejectEmpty: true,\r\n        rejectHigherLength: true,\r\n        rejectEqualSequence: true,\r\n    });\r\n    if ((0, exports.dv)(cpf) !== cpf.substring(9, 11)) {\r\n        throw ValidationBRError_1.default.INVALID_DV;\r\n    }\r\n    return true;\r\n};\r\nexports.validateOrFail = validateOrFail;\r\n/**\r\n * validate()\r\n * Valida se um número é válido\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validate = (value) => {\r\n    try {\r\n        return (0, exports.validateOrFail)(value);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.validate = validate;\r\nexports.default = exports.validate;\r\n//# sourceMappingURL=cpf.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ValidationBRError extends Error {\r\n}\r\nexports.default = ValidationBRError;\r\nValidationBRError.INVALID_DV = new ValidationBRError('Dígito verificador inválido');\r\nValidationBRError.EMPTY_VALUE = new ValidationBRError('Valor não preenchido');\r\nValidationBRError.MAX_LEN_EXCEDEED = new ValidationBRError('Número de caracteres excedido');\r\nValidationBRError.SEQUENCE_REPEATED = new ValidationBRError('Sequência de números repetidos não permitida');\r\n//# sourceMappingURL=ValidationBRError.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isNUP17 = exports.isTituloEleitor = exports.isRenavam = exports.isPostalCode = exports.isPIS = exports.isJudicialProcess = exports.isCPF = exports.isCNPJ = exports.isCNH = void 0;\r\nconst cnh_1 = require(\"./cnh\");\r\nconst cnpj_1 = require(\"./cnpj\");\r\nconst cpf_1 = require(\"./cpf\");\r\nconst judicialProcess_1 = require(\"./judicialProcess\");\r\nconst nup17_1 = require(\"./nup17\");\r\nconst pisPasep_1 = require(\"./pisPasep\");\r\nconst postalCode_1 = require(\"./postalCode\");\r\nconst renavam_1 = require(\"./renavam\");\r\nconst tituloEleitor_1 = require(\"./tituloEleitor\");\r\nconst isCNH = (value) => (0, cnh_1.validate)(value);\r\nexports.isCNH = isCNH;\r\nconst isCNPJ = (value) => (0, cnpj_1.validate)(value);\r\nexports.isCNPJ = isCNPJ;\r\nconst isCPF = (value) => (0, cpf_1.validate)(value);\r\nexports.isCPF = isCPF;\r\nconst isJudicialProcess = (value) => (0, judicialProcess_1.validate)(value);\r\nexports.isJudicialProcess = isJudicialProcess;\r\nconst isPIS = (value) => (0, pisPasep_1.validate)(value);\r\nexports.isPIS = isPIS;\r\nconst isPostalCode = (value) => (0, postalCode_1.validate)(value);\r\nexports.isPostalCode = isPostalCode;\r\nconst isRenavam = (value) => (0, renavam_1.validate)(value);\r\nexports.isRenavam = isRenavam;\r\nconst isTituloEleitor = (value) => (0, tituloEleitor_1.validate)(value);\r\nexports.isTituloEleitor = isTituloEleitor;\r\nconst isNUP17 = (value) => (0, nup17_1.validate)(value);\r\nexports.isNUP17 = isNUP17;\r\nexports.default = {\r\n    isCNH: exports.isCNH,\r\n    isCNPJ: exports.isCNPJ,\r\n    isCPF: exports.isCPF,\r\n    isJudicialProcess: exports.isJudicialProcess,\r\n    isPIS: exports.isPIS,\r\n    isPostalCode: exports.isPostalCode,\r\n    isRenavam: exports.isRenavam,\r\n    isTituloEleitor: exports.isTituloEleitor,\r\n    isNUP17: exports.isNUP17,\r\n};\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\n/**\r\n * judicialProcess\r\n * Valida, mascara e cria números de processos judiciais\r\n *\r\n * @link\r\n * https://juslaboris.tst.jus.br/bitstream/handle/20.500.12178/30318/2008_res0065_cnj_rep01.pdf?sequence=2\r\n * http://ghiorzi.org/DVnew.htm#f\r\n *\r\n * @doc\r\n * Os  números de processos judiciais são usados a partir de 2010 para unificar a\r\n * numeração de processos no Brasil e são usados em todos os tribunais.\r\n *\r\n * O número do processo, sem os caracteres especiais, devem possuir até 20 números\r\n * e deve seguir o padrão abaixo:\r\n *\r\n * 1) Partes do número\r\n *  0002080-25.2012.5.15.0049\r\n *  NNNNNNN-DD.AAAA.J.TR.OOOO\r\n * |______|__|____|_|__|____|\r\n *    |    |   |  | |   |----> Unidade de origem do processo com 4 caracteres\r\n *    |    |   |  | |--------> TR=Tribunal do segmento do poder judiciário com 2 caracteres\r\n *    |    |   |  |----------> J=Órgão do poder Judiciário com 1 caractere\r\n *    |    |   |-------------> Ano do ajuizamento do processo com 4 caracteres\r\n *    |    |-----------------> Dígito verificador com 2 caracteres\r\n *    |----------------------> Número sequencial do Processo, por unidade de\r\n *                             origem, reiniciado anualmente com 7 caracteres\r\n *\r\n * Órgãos do Poder Judiciário\r\n * 1 - Supremo Tribunal Federal\r\n * 2 - Conselho Nacional de Justiça\r\n * 3 - Superior Tribunal de Justiça\r\n * 4 - Justiça Federal\r\n * 5 - Justiça do Trabalho\r\n * 6 - Justiça Eleitoral\r\n * 7 - Justiça Militar da União\r\n * 8 - Justiça dos Estados e do Distrito Federal e Territórios\r\n * 9 - Justiça Militar Estadual\r\n *\r\n *\r\n * 2) Dígito Verificador\r\n *\r\n * O algoritmo usado para o cálculo do DV chama-se Módulo 97 de Base 10 (ISO 7064).\r\n *\r\n * Nota: O número do processo possui 20 caracteres e ultrapassa o tamanho máximo\r\n * do inteiro em javascript, impedindo que façamos o cálculo diretamente, desta\r\n * forma, será nacessária uma fatoração para que o resultado seja o correto.\r\n *\r\n * 2.1) Cálculo do DV\r\n * - Caso o DV seja conhecido, ele precisa ser removido do número e colocado\r\n * como \"00\" ao final. Caso não esteja incluso no número, adicione '00' ao final.\r\n *\r\n * Ex.: O processo \"00020802520125150049\", cujo dv é \"25\", será calculado como\r\n * \"000208020125150049\" e receberá \"00\" ao final. O número usado para o cálculo\r\n * do DV será \"00020802012515004900\"\r\n *\r\n * 2.2) Etapas de Cálculo\r\n *\r\n * 00020802012515004900\r\n *                   ↓↓\r\n *                   DV ao final como \"00\"\r\n *\r\n * - Aplicamos o MOD 97 aos caracteres de 0 a 7 para calcular a primeira parte\r\n * part1 = 0002080 % 97 = 43\r\n *\r\n * - Concatenamos part1 ao ano, órgão do poder judiciário e tribunal e aplicamos o MOD 97\r\n * para obtermos o valor da part2\r\n * part2 = ( part1 +''+ 2012 +''+ 5 +''+ 15 ) % 97 = 26\r\n *\r\n * - Concatemos part2 ao código do órgão de origem e ao \"00\" do final e aplicamos\r\n * o MOD 97 ao resultado\r\n * part3 = ( part2 + '0049' + '00') % 97 = 73\r\n *\r\n * - Subtraímos o resultado de 98\r\n * dv = 98 - 73 = 25\r\n *\r\n * O Dígito verificador é 25 e deve ser aplicado após o 7º caractere do número do processo\r\n *\r\n * Fonte: https://juslaboris.tst.jus.br/bitstream/handle/20.500.12178/30318/2008_res0065_cnj_rep01.pdf?sequence=2\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._getSubCourt = exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;\r\nconst ValidationBRError_1 = __importDefault(require(\"./data/ValidationBRError\"));\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n *\r\n *\r\n */\r\nconst dv = (value) => {\r\n    const judicialProcess = (0, utils_1.clearValue)(value, 18, { trimAtRight: true, rejectEmpty: true });\r\n    const num = judicialProcess.substring(0, 7);\r\n    const yearAndCourt = judicialProcess.substring(7, 14);\r\n    const origin = judicialProcess.substring(14, 18);\r\n    return String(98 - (Number(`${Number(`${Number(num) % 97}${yearAndCourt}`) % 97}${origin}00`) % 97)).padStart(2, '0');\r\n};\r\nexports.dv = dv;\r\n/**\r\n * Aplica uma máscara ao número informado\r\n *\r\n * @param {String} value Número de Processo\r\n * @returns {String} Valor com a máscara\r\n */\r\nconst mask = (value) => (0, utils_1.applyMask)(value, '0000000-00.0000.0.00.0000');\r\nexports.mask = mask;\r\n/**\r\n *\r\n *\r\n */\r\nconst fake = (withMask = false) => {\r\n    const num = (0, utils_1.fakeNumber)(7, true);\r\n    const year = new Date().getFullYear() - +(0, utils_1.fakeNumber)(1);\r\n    let courte1 = (0, utils_1.fakeNumber)(1, true); // Não pode ser '0'\r\n    courte1 = courte1 === '0' ? '1' : courte1;\r\n    const courte2 = _getSubCourt();\r\n    const courte = `${courte1}${courte2}`;\r\n    const origin = (0, utils_1.fakeNumber)(4, true);\r\n    const judicialProcess = `${num}${year}${courte}${origin}`;\r\n    const digits = (0, exports.dv)(judicialProcess);\r\n    const finalNumber = (0, utils_1.insertAtPosition)(judicialProcess, digits, 7);\r\n    if (withMask)\r\n        return (0, exports.mask)(finalNumber);\r\n    return finalNumber;\r\n};\r\nexports.fake = fake;\r\n/**\r\n * validateOrFail()\r\n * Valida se um número é válido e\r\n * retorna uma exceção se não estiver\r\n *\r\n * @param {String} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validateOrFail = (value) => {\r\n    const judicialProcess = (0, utils_1.clearValue)(value, 20, {\r\n        fillZerosAtLeft: true,\r\n        rejectEmpty: true,\r\n        rejectHigherLength: true,\r\n    });\r\n    const processWithoutDV = (0, utils_1.removeFromPosition)(judicialProcess, 7, 9);\r\n    if (processWithoutDV.substring(11, 12) === '0') {\r\n        throw new Error('Código do Órgão Judiciário não pode ser \"0\"');\r\n    }\r\n    if ((0, exports.dv)(processWithoutDV) !== judicialProcess.substring(7, 9)) {\r\n        throw ValidationBRError_1.default.INVALID_DV;\r\n    }\r\n    return true;\r\n};\r\nexports.validateOrFail = validateOrFail;\r\n/**\r\n * validate()\r\n * Valida se um número é válido\r\n *\r\n * @param {String} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validate = (value) => {\r\n    try {\r\n        return (0, exports.validateOrFail)(value);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.validate = validate;\r\n// ////////////////////////////////////////////\r\n//\r\n// Funções auxiliares\r\n//\r\n// ////////////////////////////////////////////\r\n/**\r\n * Gera um número fake da sub corte de acordo com as regras:\r\n * - Precisa ser uma string numérica de 2 dígitos.\r\n * - Não pode ser '0'. CAso seja zero, mude para '01'.\r\n *\r\n * A função aceita um parâmetro para viabilizar os testes. Caso\r\n * não seja definido, será gerado aleatoriamente.\r\n *\r\n * @param\r\n *\r\n */\r\nfunction _getSubCourt(courte = undefined) {\r\n    courte = courte !== null && courte !== void 0 ? courte : (0, utils_1.fakeNumber)(2, true).toString();\r\n    return +courte === 0 ? '01' : courte;\r\n}\r\nexports._getSubCourt = _getSubCourt;\r\nexports.default = exports.validate;\r\n//# sourceMappingURL=judicialProcess.js.map","\"use strict\";\r\n/**\r\n * isFederalProtocol()\r\n * Calcula se é um número válido de protocolo do Governo Federal Brasileiro\r\n *\r\n * @doc\r\n * O Número Unificado de Protocolo de processos do Governo Federal, também conhecido\r\n * como NUP17, deve ter 17 caracteres, incluindo o dígito verificador de 2 caracteres.\r\n *\r\n * 1) Partes do número\r\n *\r\n * - Os caracteres 1 a 5 são um código do órgão que gerou o protocolo.\r\n *\r\n * - Os caracteres 6 a 11 são o número sequencial do protocolo, sendo que\r\n * cada órgão emissor tem sua própria sequência e esta é reiniciada a cada ano.\r\n *\r\n * - Os caracteres 12 a 15 são referentes ao ano de protocolo\r\n *\r\n * - Os caracteres 16 a 17 são referentes ao Dígito Verificador\r\n *\r\n * 1.2) Exemplo\r\n * ---------------------------------------------------------------\r\n * |  Código do órgão |   Número Sequencial   |    Ano     | D  V\r\n *  2   3   0   3   7 . 0   0   1   4   6   2 / 2  0  2  1 - 6  5\r\n *\r\n * 2) Cálculo do primeiro DV.\r\n *\r\n *  - Soma-se o produto das algarismos 1 a 15 pelos números\r\n *    16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2\r\n *\r\n *    2   3   0   3   7   0   0   1   4   6   2   2   0   2   1\r\n *    x   x   x   x   x   x   x   x   x   x   x   x   x   x   x\r\n *   16  15  14  13  12  11  10   9   8   7   6   5   4   3   2\r\n * = 32 +45  +0 +39 +84  +0  +0  +9 +32 +42 +12 +10  +0  +6  +2 = 313\r\n *\r\n *  - O somatório encontrado é dividido por 11. O resto da divisão é subtraído de 11.\r\n *    313 / 11 tem resto 5. 11 - 5 = 6. DV1 é 6.\r\n *    Obs.: Caso o cálculo de DV1 retorne 10, o resultado será 0. Caso retorne 11, o DV\r\n *    será 1. Ou seja, se for maior ou igual a 10, desconsidere a casa das dezenas\r\n *\r\n * 3) Cálculo do segundo DV.\r\n *\r\n * - Acrescenta o valor do DV1 ao número e faz o somatório dos produtos pelos números\r\n *   17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2\r\n *\r\n *    2   3   0   3   7   0   0   1   4   6   2   2   0   2   1   6\r\n *    x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x\r\n *   17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2\r\n * = 34 +48  +0 +42 +91  +0  +0 +10 +36 +48 +14 +12  +0  +8  +3 +12 = 358\r\n *\r\n *  - O somatório encontrado é dividido por 11. O resto da divisão é subtraído de 11.\r\n *    358 / 11 tem resto 6. 11 - 6 = 1. DV1 é 5.\r\n *    Obs.: Caso o cálculo de DV1 retorne 10, o resultado será 0. Caso retorne 11, o DV\r\n *    será 1. Ou seja, se for maior ou igual a 10, desconsidere a casa das dezenas.\r\n *\r\n * = DV = 65\r\n *\r\n * Fonte: https://www.gov.br/compras/pt-br/acesso-a-informacao/legislacao/portarias/portaria-interministerial-no-11-de-25-de-novembro-de-2019\r\n *\r\n * @param {String} value Título eleitoral\r\n * @returns {Boolean}\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;\r\nconst ValidationBRError_1 = __importDefault(require(\"./data/ValidationBRError\"));\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n * dv()\r\n * Calcula o dígito verificador\r\n *\r\n * @param {String} value\r\n * @returns {String}\r\n */\r\nconst dv = (value) => {\r\n    const nup = (0, utils_1.clearValue)(value, 15, { rejectEmpty: true, trimAtRight: true });\r\n    const nupReverse = nup.split('').reverse().join('');\r\n    const sum1 = (0, utils_1.sumElementsByMultipliers)(nupReverse, [...Array(15)].map((_, i) => i + 2));\r\n    const dv1 = _specificSumToDV(sum1);\r\n    const sum2 = (0, utils_1.sumElementsByMultipliers)(dv1 + nupReverse, [...Array(16)].map((_, i) => i + 2));\r\n    const dv2 = _specificSumToDV(sum2);\r\n    return `${dv1}${dv2}`;\r\n};\r\nexports.dv = dv;\r\n/**\r\n * Aplica uma máscara ao número informado\r\n *\r\n * @param {String} value Número de Processo\r\n * @returns {String} Valor com a máscara\r\n */\r\nconst mask = (value) => (0, utils_1.applyMask)(value, '00000.000000/0000-00');\r\nexports.mask = mask;\r\n/**\r\n * fake()\r\n * Gera um número válido\r\n *\r\n * @param {Boolean} withMask Define se o número deve ser gerado com ou sem máscara\r\n * @returns {String}\r\n */\r\nconst fake = (withMask = false) => {\r\n    const num = (0, utils_1.fakeNumber)(15, true);\r\n    const nup = `${num}${(0, exports.dv)(String(num))}`;\r\n    if (withMask)\r\n        return (0, exports.mask)(nup);\r\n    return nup;\r\n};\r\nexports.fake = fake;\r\n/**\r\n * validateOrFail()\r\n * Valida se um número é válido e\r\n * retorna uma exceção se não estiver\r\n *\r\n * @param {String} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validateOrFail = (value) => {\r\n    const nup = (0, utils_1.clearValue)(value, 17, {\r\n        rejectEmpty: true,\r\n        rejectHigherLength: true,\r\n    });\r\n    if ((0, exports.dv)(nup) !== nup.substring(15, 17)) {\r\n        throw ValidationBRError_1.default.INVALID_DV;\r\n    }\r\n    return true;\r\n};\r\nexports.validateOrFail = validateOrFail;\r\n/**\r\n * validate()\r\n * Valida se um número é válido\r\n *\r\n * @param {String} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validate = (value) => {\r\n    try {\r\n        return (0, exports.validateOrFail)(value);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.validate = validate;\r\nexports.default = exports.validate;\r\nfunction _specificSumToDV(sum) {\r\n    const rest = 11 - (sum % 11);\r\n    const exceptions = [\r\n        { rest: 11, dv: 1 },\r\n        { rest: 10, dv: 0 },\r\n    ];\r\n    const inExceptions = exceptions.find((item) => item.rest === rest);\r\n    return !inExceptions ? rest : inExceptions.dv;\r\n}\r\n//# sourceMappingURL=nup17.js.map","\"use strict\";\r\n/**\r\n * isPIS()\r\n * Calcula se um código de PIS/PASEP/NIS/NIT no formato 268.27649.96-0 é válido. Não\r\n * valida o formato, portanto, 26827649960 é equivalente a 268.27649.96-0 para efeitos\r\n * desta validação.\r\n *\r\n * @doc\r\n * - O número de PIS deve possuir 11 caracteres\r\n *\r\n * - Os caracteres de 1 a 10 são a numeração documento\r\n *\r\n * - O caractere 11 é o dígito verificador.\r\n *\r\n * 1) Partes do número\r\n *  _______________________________________________\r\n * |  Número                                 | D V |\r\n * |  2   6   8 . 2   7   6   4   9 . 9   6  -  0  |\r\n * |_________________________________________|_____|\r\n *\r\n * 2) Cálculo do DV.\r\n *\r\n *  - Soma-se o produto das algarismos 3 a 10 pelos números 3, 2, 9, 8, 7, 6, 5, 4, 3, 2\r\n *\r\n *    2   6   8   2   7   6   4   9   9   6\r\n *    x   x   x   x   x   x   x   x   x   x\r\n *    3   2   9   8   7   6   5   4   3   2\r\n * =  6 +12 +72 +16 +49 +12 +20 +36 +27 +12  =  234\r\n *\r\n *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11\r\n *    234 / 11 tem resto 3. 11 - 3 = 8. DV1 é 8.\r\n *    Obs.: Caso o cálculo de DV1 retorne 0, o resultado será 5.\r\n *          Caso retorne 1, o resto será 0\r\n *\r\n *\r\n *\r\n *\r\n * Fonte: http://www.macoratti.net/alg_pis.htm\r\n *\r\n * @param {String} value Objeto postal no formato 268.27649.96-0\r\n * @returns {Boolean}\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;\r\nconst ValidationBRError_1 = __importDefault(require(\"./data/ValidationBRError\"));\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n * dv()\r\n * Calcula o dígito verificador\r\n *\r\n * @param {Number|String} value\r\n * @returns {String}\r\n */\r\nconst dv = (value) => {\r\n    const pis = (0, utils_1.clearValue)(value, 10, {\r\n        trimAtRight: true,\r\n        rejectEmpty: true,\r\n    });\r\n    const sum = (0, utils_1.sumElementsByMultipliers)(pis, [3, 2, 9, 8, 7, 6, 5, 4, 3, 2]);\r\n    return String((0, utils_1.sumToDV)(sum));\r\n};\r\nexports.dv = dv;\r\n/**\r\n * Aplica uma máscara ao número informado\r\n *\r\n * @param {String} value Número de Processo\r\n * @returns {String} Valor com a máscara\r\n */\r\nconst mask = (value) => (0, utils_1.applyMask)(value, '000.00000.00-0');\r\nexports.mask = mask;\r\n/**\r\n * fake()\r\n * Gera um número válido\r\n *\r\n * @returns {String}\r\n */\r\nconst fake = (withMask = false) => {\r\n    const num = (0, utils_1.fakeNumber)(10, true);\r\n    const pis = `${num}${(0, exports.dv)(num)}`;\r\n    if (withMask)\r\n        return (0, exports.mask)(pis);\r\n    return pis;\r\n};\r\nexports.fake = fake;\r\n/**\r\n * validateOrFail()\r\n * Valida se um número é válido e\r\n * retorna uma exceção se não estiver\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validateOrFail = (value) => {\r\n    const pis = (0, utils_1.clearValue)(value, 11, {\r\n        fillZerosAtLeft: true,\r\n        rejectEmpty: true,\r\n        rejectHigherLength: true,\r\n        rejectEqualSequence: true,\r\n    });\r\n    if ((0, exports.dv)(pis) !== pis.substring(10, 11)) {\r\n        throw ValidationBRError_1.default.INVALID_DV;\r\n    }\r\n    return true;\r\n};\r\nexports.validateOrFail = validateOrFail;\r\n/**\r\n * validate()\r\n * Valida se um número é válido\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validate = (value) => {\r\n    try {\r\n        return (0, exports.validateOrFail)(value);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.validate = validate;\r\nexports.default = exports.validate;\r\n//# sourceMappingURL=pisPasep.js.map","\"use strict\";\r\n/**\r\n * isPostalCode()\r\n * Calcula se um código de rastreamento postal no formato JT194690698BR é válido.\r\n *\r\n * @doc\r\n * - O número de registro postal deve possuir 13 caracters no formato JT194690698BR.\r\n *\r\n * - Os caracteres 1 e 2 informam o tipo do objeto. Ex.: SX é Sedex, RC é carta registrada etc.\r\n *\r\n * - Os caracteres de 3 a 10 são a numeração sequencial do tipo do objeto.\r\n *\r\n * - O caractere 11 é o dígito verificador.\r\n *\r\n * - Os caracteres 12 e 13 representa o código do País de onde a postagem partiu.\r\n *\r\n * 1) Partes do número\r\n *  ______ ___________________________ ______ _______\r\n * | Tipo | Número                    |  DV  |  País |\r\n * | J T    1  9  4  6  9  0  6  9       8      B R  |\r\n * |______|___________________________|______|_______|\r\n *\r\n * 2) Cálculo do DV.\r\n *\r\n *  - Soma-se o produto das algarismos 3 a 10 pelos números 8, 6, 4, 2, 3, 5, 9, 7\r\n *\r\n *    1   9   4   6   9   0   6   9\r\n *    x   x   x   x   x   x   x   x\r\n *    8   6   4   2   3   5   9   7\r\n * =  8 +54 +16 +12 +18  +0 +54 +63 = 234\r\n *\r\n *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11\r\n *    234 / 11 tem resto 3. 11 - 3 = 8. DV1 é 8.\r\n *    Obs.: Caso o cálculo de DV1 retorne 0, o resultado será 5.\r\n *          Caso retorne 1, o resto será 0\r\n *\r\n *\r\n *\r\n *\r\n * Fonte:\r\n *\r\n * @param {String} value Objeto postal no formato JT194690698BR\r\n * @returns {Boolean}\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;\r\nconst ValidationBRError_1 = __importDefault(require(\"./data/ValidationBRError\"));\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n * dv()\r\n * Calcula o dígito verificador\r\n *\r\n * @param {Number|String} value\r\n * @returns {String}\r\n */\r\nconst dv = (value) => {\r\n    if (!value)\r\n        throw ValidationBRError_1.default.EMPTY_VALUE;\r\n    const postalCode = String(value)\r\n        .replace(/[^0-9]+/gi, '')\r\n        .padStart(8, '0')\r\n        .substring(0, 8);\r\n    const sum = (0, utils_1.sumElementsByMultipliers)(postalCode, [8, 6, 4, 2, 3, 5, 9, 7]);\r\n    const rest = sum % 11;\r\n    // const specificities = { 0: { dv: 5 }, 1: { dv: 0 } }\r\n    const specificities = [\r\n        { rest: 0, dv: 5 },\r\n        { rest: 1, dv: 0 },\r\n    ];\r\n    const specifity = specificities.find((item) => item.rest === rest);\r\n    const DV = specifity ? specifity.dv : 11 - rest;\r\n    return String(DV);\r\n};\r\nexports.dv = dv;\r\n/**\r\n * Aplica uma máscara ao número informado\r\n *\r\n * @param {String} value Número de Processo\r\n * @returns {String} Valor com a máscara\r\n */\r\nconst mask = (value) => String(value).toLocaleUpperCase();\r\nexports.mask = mask;\r\n/**\r\n * fake()\r\n * Gera um número válido\r\n *\r\n * @returns {String}\r\n */\r\nconst fake = (withMask = false) => {\r\n    const num = (0, utils_1.fakeNumber)(8, true);\r\n    const postalCode = `${(0, utils_1.randomLetter)()}${(0, utils_1.randomLetter)()}${num}${(0, exports.dv)(num)}BR`;\r\n    if (withMask)\r\n        return (0, exports.mask)(postalCode);\r\n    return postalCode;\r\n};\r\nexports.fake = fake;\r\n/**\r\n * validateOrFail()\r\n * Valida se um número é válido e\r\n * retorna uma exceção se não estiver\r\n *\r\n * @param {String} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validateOrFail = (value) => {\r\n    if (!/^[a-z]{2}([\\d]{9})[a-z]{2}$/gi.test(String(value))) {\r\n        throw new Error('O número não está no formato \"XX000000000XX\"');\r\n    }\r\n    const postalCode = (0, utils_1.clearValue)(value.substring(2, 11), 9);\r\n    if ((0, exports.dv)(value.substring(2, 11)) !== postalCode.substring(8, 9)) {\r\n        throw ValidationBRError_1.default.INVALID_DV;\r\n    }\r\n    return true;\r\n};\r\nexports.validateOrFail = validateOrFail;\r\n/**\r\n * validate()\r\n * Valida se um número é válido\r\n *\r\n * @param {String} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validate = (value) => {\r\n    try {\r\n        return (0, exports.validateOrFail)(value);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.validate = validate;\r\nexports.default = exports.validate;\r\n//# sourceMappingURL=postalCode.js.map","\"use strict\";\r\n/**\r\n * RENAVAM\r\n * Funções auxiliares para cálculo de máscaras, validação, dígito verificador e criaçãode\r\n * números fake.\r\n *\r\n * @doc\r\n * - O número de RENAVAM deve possuir 11 caracteres\r\n *\r\n * - Os caracteres de 1 a 10 são a numeração documento\r\n *\r\n * - O caractere 11 é o dígito verificador.\r\n *\r\n * 1) Partes do número\r\n *  _______________________________________________\r\n * |  Número                                 | D V |\r\n * |  2   6   8   2   7   6   4   9   9   6  -  0  |\r\n * |_________________________________________|_____|\r\n *\r\n * 2) Cálculo do DV.\r\n *\r\n *  - Soma-se o produto das algarismos 3 a 10 pelos números 3, 2, 9, 8, 7, 6, 5, 4, 3, 2\r\n *\r\n *    2   6   8   2   7   6   4   9   9   6\r\n *    x   x   x   x   x   x   x   x   x   x\r\n *    3   2   9   8   7   6   5   4   3   2\r\n * =  6 +12 +72 +16 +49 +12 +20 +36 +27 +12  =  234\r\n *\r\n *  - O somatório encontrado é multiplicado por 10 e ao resultado\r\n *    é aplicado o cálculo do MOD 11.\r\n *\r\n *    ( 234 * 10 ) / 11 tem resto 8. DV = 8. Caso o resto seja maior ou igual a\r\n *    10, DV será 0.\r\n *\r\n *\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;\r\nconst ValidationBRError_1 = __importDefault(require(\"./data/ValidationBRError\"));\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n * dv()\r\n * Calcula o dígito verificador\r\n *\r\n * @param {Number|String} value\r\n * @returns {String}\r\n */\r\nconst dv = (value) => {\r\n    const renavam = (0, utils_1.clearValue)(value, 10, {\r\n        fillZerosAtLeft: true,\r\n        trimAtRight: true,\r\n        rejectEmpty: true,\r\n    });\r\n    const sum1 = (0, utils_1.sumElementsByMultipliers)(renavam, [3, 2, 9, 8, 7, 6, 5, 4, 3, 2]) * 10;\r\n    const dv1 = sum1 % 11 >= 10 ? 0 : sum1 % 11;\r\n    return `${dv1}`;\r\n};\r\nexports.dv = dv;\r\n/**\r\n * Aplica uma máscara ao número informado\r\n *\r\n * @param {String} value Número de Processo\r\n * @returns {String} Valor com a máscara\r\n */\r\nconst mask = (value) => (0, utils_1.applyMask)(value, '0000000000-0');\r\nexports.mask = mask;\r\n/**\r\n * fake()\r\n * Gera um número válido\r\n *\r\n * @returns {String}\r\n */\r\nconst fake = (withMask = false) => {\r\n    const value = (0, utils_1.fakeNumber)(10, true);\r\n    const renavam = `${value}${(0, exports.dv)(value)}`;\r\n    if (withMask)\r\n        return (0, exports.mask)(renavam);\r\n    return renavam;\r\n};\r\nexports.fake = fake;\r\n/**\r\n * validateOrFail()\r\n * Valida se um número é válido e\r\n * retorna uma exceção se não estiver\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validateOrFail = (value) => {\r\n    const renavam = (0, utils_1.clearValue)(value, 11, {\r\n        fillZerosAtLeft: true,\r\n        rejectEmpty: true,\r\n        rejectHigherLength: true,\r\n        rejectEqualSequence: true,\r\n    });\r\n    if ((0, exports.dv)(renavam) !== renavam.substring(10, 11)) {\r\n        throw ValidationBRError_1.default.INVALID_DV;\r\n    }\r\n    return true;\r\n};\r\nexports.validateOrFail = validateOrFail;\r\n/**\r\n * validate()\r\n * Valida se um número é válido\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validate = (value) => {\r\n    try {\r\n        return (0, exports.validateOrFail)(value);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.validate = validate;\r\nexports.default = exports.validate;\r\n//# sourceMappingURL=renavam.js.map","\"use strict\";\r\n/**\r\n * isTitulo()\r\n * Calcula se um título eleitoral é válido\r\n *\r\n * @doc\r\n * Título de eleitor deve possuir 12 dígitos.\r\n *\r\n * - Os caracteres 1 a 8 são números sequenciais.\r\n *\r\n * - Os caracteres 9 e 10 representam os estados da federação onde o título\r\n *   foi emitido (01 = SP, 02 = MG, 03 = RJ, 04 = RS, 05 = BA, 06 = PR, 07 = CE, 08 = PE,\r\n *   09 = SC, 10 = GO,  11 = MA12 = PB, 13 = PA, 14 = ES, 15 = PI, 16 = RN, 17 = AL,\r\n *   18 = MT, 19 = MS, 20 = DF, 21 = SE, 22 = AM, 23 = RO, 24 = AC, 25 = AP, 26 = RR,\r\n *   27 = TO, 28 = Exterior(ZZ).\r\n *\r\n * - Os caracteres 11 e 12 são dígitos verificadores.\r\n *\r\n * 1) Partes do número\r\n * ------------------------------------------------\r\n * |       Número Sequencial      |  UF   |   DV  |\r\n *  1   0   2   3   8   5   0   1   0   6   7   1\r\n *\r\n * 2) Cálculo do primeiro DV.\r\n *\r\n *  - Soma-se o produto das algarismos 1 a 8 pelos números 2, 3, 4, 5, 6, 7, 8 e 9.\r\n *\r\n *   1   0   2   3   8   5   0   1\r\n *   x   x   x   x   x   x   x   x\r\n *   2   3   4   5   6   7   8   9\r\n * = 2 + 0 + 8 +15 +48 +35 + 0 + 9  = 117\r\n *\r\n *  - O somatório encontrado é dividido por 11. O DV1 é o resto da divisão. Se o\r\n *    resto for 10, o DV1 é 0.\r\n *\r\n * 2.1) 117 / 11 tem resto igual a 7.\r\n *\r\n * 3) Cálculo do segundo DV\r\n *\r\n * - Soma-se o produto dos algarismos 9 a 11 (relativos aos 2 dígitos da UF e o novo\r\n *   DV1 que acabou de ser calculado) e os multiplicam pelos números 7, 8 e 9. Se o\r\n *   resto for 10, DV2 será 0.\r\n *   0   6   7\r\n *   x   x   x\r\n *   7   8   9\r\n * = 0 +48 +63 = 111\r\n *\r\n * 3.1) 111 / 11 tem resto igual a 1.\r\n *\r\n * Fonte: http://clubes.obmep.org.br/blog/a-matematica-nos-documentos-titulo-de-eleitor/\r\n *\r\n * @param {String} value Título eleitoral\r\n * @returns {Boolean}\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;\r\nconst ValidationBRError_1 = __importDefault(require(\"./data/ValidationBRError\"));\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n * dv()\r\n * Calcula o dígito verificador\r\n *\r\n * @param {Number|String} value\r\n * @returns {String}\r\n */\r\nconst dv = (value) => {\r\n    const titulo = (0, utils_1.clearValue)(value, 10, {\r\n        fillZerosAtLeft: true,\r\n        trimAtRight: true,\r\n        rejectEmpty: true,\r\n    });\r\n    const sum1 = (0, utils_1.sumElementsByMultipliers)(titulo.substring(0, 8), [2, 3, 4, 5, 6, 7, 8, 9]);\r\n    const dv1 = sum1 % 11 >= 10 ? 0 : sum1 % 11;\r\n    const sum2 = (0, utils_1.sumElementsByMultipliers)(titulo.substring(8, 10) + dv1, [7, 8, 9]);\r\n    const dv2 = sum2 % 11 >= 10 ? 0 : sum2 % 11;\r\n    return `${dv1}${dv2}`;\r\n};\r\nexports.dv = dv;\r\n/**\r\n * Aplica uma máscara ao número informado\r\n *\r\n * @param {String} value Número de Processo\r\n * @returns {String} Valor com a máscara\r\n */\r\nconst mask = (value) => (0, utils_1.applyMask)(value, '0000.0000.0000');\r\nexports.mask = mask;\r\n/**\r\n * fake()\r\n * Gera um número válido\r\n *\r\n * @returns {String}\r\n */\r\nconst fake = (withMask = false) => {\r\n    const num = (0, utils_1.fakeNumber)(8, true);\r\n    const uf = (Math.random() * 27 + 1).toFixed(0).padStart(2, '0');\r\n    const titulo = `${num}${uf}${(0, exports.dv)(num + uf)}`;\r\n    if (withMask)\r\n        return (0, exports.mask)(titulo);\r\n    return titulo;\r\n};\r\nexports.fake = fake;\r\n/**\r\n * validateOrFail()\r\n * Valida se um número é válido e\r\n * retorna uma exceção se não estiver\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validateOrFail = (value) => {\r\n    const titulo = (0, utils_1.clearValue)(value, 12, {\r\n        fillZerosAtLeft: true,\r\n        rejectEmpty: true,\r\n        rejectHigherLength: true,\r\n        rejectEqualSequence: true,\r\n    });\r\n    if ((0, exports.dv)(titulo) !== titulo.substring(10, 12)) {\r\n        throw ValidationBRError_1.default.INVALID_DV;\r\n    }\r\n    return true;\r\n};\r\nexports.validateOrFail = validateOrFail;\r\n/**\r\n * validate()\r\n * Valida se um número é válido\r\n *\r\n * @param {String|Number} value Número a ser validado\r\n * @returns {Boolean}\r\n */\r\nconst validate = (value) => {\r\n    try {\r\n        return (0, exports.validateOrFail)(value);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.validate = validate;\r\nexports.default = exports.validate;\r\n//# sourceMappingURL=tituloEleitor.js.map","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.randomLetter = exports.applyMask = exports.removeFromPosition = exports.insertAtPosition = exports.clearValue = exports.fakeNumber = exports.sumElementsByMultipliers = exports.invalidListGenerator = exports.sumToDV = void 0;\r\nconst ValidationBRError_1 = __importDefault(require(\"./data/ValidationBRError\"));\r\n/**\r\n * Calcula o DV verificador a partir das regras do MOD11:\r\n * O valor da soma é dividido por 11. O resultado é o resto da divisão. Caso o resto seja\r\n * menor que 2, ou seja, o valor da divisão seja 10 ou 11, o resultado é 0.\r\n *\r\n * @param {Integer} sum Soma\r\n * @returns {Integer}\r\n */\r\nfunction sumToDV(sum) {\r\n    return sum % 11 < 2 ? 0 : 11 - (sum % 11);\r\n}\r\nexports.sumToDV = sumToDV;\r\n/**\r\n * Cria uma lista de valores repetidos no tamanho do documento para eliminar\r\n * valores que já conhecemos como inválidos\r\n *\r\n * @example\r\n * invalidListGenerator(10, 11)\r\n * //-> [00000000000, 11111111111, ....., 99999999999]\r\n *\r\n * @param {Integer} length Número de itens do array\r\n * @param {Integer} size Tamanho da string gerada\r\n * @returns {Array} Lista de valores\r\n */\r\nfunction invalidListGenerator(size) {\r\n    return [...Array(10).keys()].map((f) => String(f).repeat(size));\r\n}\r\nexports.invalidListGenerator = invalidListGenerator;\r\n/**\r\n * Multiplica os elementos de uma string com os elementos de outra, ou de um array\r\n * e soma o resultado ao final\r\n *\r\n * @example\r\n *   sumElementsByMultipliers('123', '987')      //-> 46\r\n *   sumElementsByMultipliers('123', [9, 8, 7])  //-> 46\r\n *\r\n * @param {String} value\r\n * @param {String|Array} multiplier\r\n * @returns {Integer} Somatório\r\n */\r\nfunction sumElementsByMultipliers(value, multiplier) {\r\n    if (typeof multiplier === 'string')\r\n        multiplier = multiplier.split('').map((n) => Number(n));\r\n    return multiplier.reduce((accu, curr, i) => accu + curr * Number(value.charAt(i)), 0);\r\n}\r\nexports.sumElementsByMultipliers = sumElementsByMultipliers;\r\n/**\r\n * fakeNumber()\r\n * Cria um número aleatório com o número de caracteres\r\n *\r\n * @example\r\n * fakeNumber(8, true) // -> 00083159\r\n * fakeNumber(4) // -> 831\r\n *\r\n * @param {Integer} length\r\n * @param {Boolean} forceLength Adiciona zeros à esquerda para ter os números de caractes exatos\r\n * @returns {String}\r\n */\r\nfunction fakeNumber(length, forceLength = false) {\r\n    const value = Math.floor(Math.random() * 10 ** length);\r\n    if (forceLength)\r\n        return String(value).padStart(length, '0');\r\n    return +value;\r\n}\r\nexports.fakeNumber = fakeNumber;\r\n/**\r\n * Limpa um número informado, retirando caracteres diferentes de números,\r\n * preenchendo com zeros à esquerda se for menor que o tamanho exato e\r\n * removendo uma parte do número se for maior que tamanho definido.\r\n *\r\n * 1) Retira caracteres não-numéricos\r\n * 2) Preenche com zeros à esquerda se 'value' for menor que 'length'\r\n * 3) Remove caracteres à direita se 'value' for maior que 'length'\r\n *\r\n * @example\r\n *  clearValue(12345-6, 6) // -> 123456\r\n *  clearValue(12345678, 3) // -> 123\r\n *  clearValue(12345, 10) // -> 0000001234\r\n *\r\n * @param {Number|String} value\r\n * @param {Number} length Tamanho exato. Se for null, só retira os caracteres não-numéricos\r\n * @returns {String} Número com o tamanho exato\r\n */\r\nfunction clearValue(value, length = null, options) {\r\n    let clearedValue = String(value).replace(/([/.-]+)/gi, '');\r\n    if (options) {\r\n        if (options.rejectEmpty === true && clearedValue.length === 0) {\r\n            throw ValidationBRError_1.default.EMPTY_VALUE;\r\n        }\r\n        if (options.rejectHigherLength === true && length && clearedValue.length > length) {\r\n            throw ValidationBRError_1.default.MAX_LEN_EXCEDEED;\r\n        }\r\n        if (options.rejectEqualSequence === true && length) {\r\n            const invalidList = invalidListGenerator(length);\r\n            if (invalidList.includes(clearedValue)) {\r\n                throw ValidationBRError_1.default.SEQUENCE_REPEATED;\r\n            }\r\n        }\r\n        // if (!length || clearedValue.length === length) return clearedValue\r\n        if (length && options.fillZerosAtLeft)\r\n            clearedValue = clearedValue.padStart(length, '0');\r\n        if (length && options.trimAtRight)\r\n            clearedValue = clearedValue.substring(0, length);\r\n    }\r\n    return clearedValue;\r\n}\r\nexports.clearValue = clearValue;\r\n/**\r\n * insertAtPosition()\r\n * Insere um conjunto de caracteres em um local específico de uma string\r\n *\r\n * @example\r\n * insertAtPosition('AAABBB', 'C', 3) // -> AAACBBB\r\n * insertAtPosition('000011122223445555', 99, 7) // -> 00001119922223445555\r\n *\r\n * @param {String|Number} value Valor original\r\n * @param {String|Number} insertValue Valor que será inserido\r\n * @param {String|Number} position Posição que receberá o novo valor\r\n * @returns {String}\r\n *\r\n */\r\nfunction insertAtPosition(value, insertValue, position) {\r\n    return `${value.substring(0, position)}${insertValue}${value.substring(position)}`;\r\n}\r\nexports.insertAtPosition = insertAtPosition;\r\n/**\r\n * removeFromPosition()\r\n * Retira um conjunto de caracteres de um local específico de uma string\r\n *\r\n * @example\r\n * removeFromPosition('00001119922223445555', 7,9) // -> 000011122223445555\r\n * removeFromPosition('AAACBBB', 3,4) // -> AAABBB\r\n *\r\n * @param {String|Number} value Valor original\r\n * @param {String|Number} startPosition\r\n * @param {String|Number} endPosition\r\n * @returns {String}\r\n *\r\n */\r\nfunction removeFromPosition(value, startPosition, endPosition) {\r\n    return [value.slice(0, startPosition), value.slice(endPosition)].join('');\r\n}\r\nexports.removeFromPosition = removeFromPosition;\r\n/**\r\n * applyMask()\r\n * Aplica uma máscara a uma string\r\n *\r\n * @example\r\n * applyMask('59650000', '00.000-000') // -> 59.650-000\r\n * applyMask('99877665544', '(00) 0 0000-0000') // -> (99) 8 7766-5544\r\n *\r\n * @param {String|Number} value Valor original\r\n * @param {String} mask\r\n * @returns {String}\r\n *\r\n */\r\nfunction applyMask(value, mask) {\r\n    const maskLen = clearValue(mask).length;\r\n    let masked = clearValue(value, maskLen, { fillZerosAtLeft: true, trimAtRight: true });\r\n    const specialChars = ['/', '-', '.', '(', ')', ' '];\r\n    for (let position = 0; position < mask.length; position += 1) {\r\n        const current = mask[position];\r\n        if (specialChars.includes(current))\r\n            masked = insertAtPosition(masked, current, position);\r\n    }\r\n    return masked;\r\n}\r\nexports.applyMask = applyMask;\r\n/**\r\n * randomLetter()\r\n * Pega uma letra maiúscula aleatoriamente\r\n *\r\n * @example\r\n * randomLetter() // -> A\r\n * randomLetter() // -> S\r\n *\r\n * @returns {String}\r\n */\r\nfunction randomLetter() {\r\n    const idx = Math.floor(1 + Math.random() * 26);\r\n    return String.fromCharCode(idx + 64);\r\n}\r\nexports.randomLetter = randomLetter;\r\n//# sourceMappingURL=utils.js.map","module.exports = window[\"React\"];","module.exports = window[\"wc\"][\"blocksCheckout\"];","module.exports = window[\"wc\"][\"wcBlocksRegistry\"];","module.exports = window[\"wc\"][\"wcSettings\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"htmlEntities\"];","module.exports = window[\"wp\"][\"i18n\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { __ } from '@wordpress/i18n';\nimport { useState, useEffect } from '@wordpress/element';\nimport { registerPaymentMethod } from '@woocommerce/blocks-registry';\nimport { ValidationInputError } from '@woocommerce/blocks-checkout';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { getSetting } from '@woocommerce/settings';\nimport { InlineTaxIdField } from './elements';\n\n// PIX Gateway\nconst pixSettings \t\t= getSetting( 'paghiper_pix_data', {} );\nconst defaultPixLabel \t= __( 'PIX Paghiper', 'woo-boleto-paghiper' )\nconst label \t\t\t= decodeEntities( pixSettings.title ) || defaultPixLabel\n\nconst Content = ( props ) => {\n\n\tconst { eventRegistration, emitResponse } = props;\n\tconst { onPaymentSetup } = eventRegistration;\n\n\t\n    const [ taxID, setTaxID ] = useState('');\n    const [ payerName, setPayerName ] = useState('');\n\n\tuseEffect( () => {\n\t\tconst unsubscribe = onPaymentSetup( async () => {\n\t\t\t// Here we can do any processing we need, and then emit a response.\n\t\t\t// For example, we might validate a custom field, or perform an AJAX request, and then emit a response indicating it is valid or not.\n\n\t\t\tconst paghiperTaxId = taxID;\n\t\t\tconst paghiperTaxIdIsValid = !! paghiperTaxId.length;\n\t\t\tconst paghiperTaxIdFieldName = \"_\" + props.gatewayName + \"_cpf_cnpj\";\n\n\t\t\tif ( paghiperTaxIdIsValid ) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: emitResponse.responseTypes.SUCCESS,\n\t\t\t\t\tmeta: {\n\t\t\t\t\t\tpaymentMethodData: {\n\t\t\t\t\t\t\t[ paghiperTaxIdFieldName ]: paghiperTaxId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttype: emitResponse.responseTypes.ERROR,\n\t\t\t\tmessage: 'There was an error',\n\t\t\t};\n\t\t} );\n\t\t// Unsubscribes when this component is unmounted.\n\t\treturn () => {\n\t\t\tunsubscribe();\n\t\t};\n\t}, [\n\t\ttaxID,\n\t\temitResponse.responseTypes.ERROR,\n\t\temitResponse.responseTypes.SUCCESS,\n\t\tonPaymentSetup,\n\t] );\n\n\tconst onChange = ( paymentEvent ) => {\n\t\tif ( paymentEvent.error ) {\n\t\t\tconsole.log('Paghiper: Payment Error');\n\t\t}\n\n\t\tsetTaxID(paymentEvent.target.value.replace(/\\D/g, ''));\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<>{decodeEntities( props.gatewayDescription || '' )}</>\n\t\t\t<InlineTaxIdField \n\t\t\t\tgatewayName={ props.gatewayName }\n\t\t\t\tonChange={ onChange } \n\t\t\t\tinputErrorComponent={ ValidationInputError }\n\t\t\t/>\n\t\t</>)\n}\n\nconst Label = ( props ) => {\n\tconst { PaymentMethodLabel } = props.components\n\n\treturn <PaymentMethodLabel text={ label } />\n}\n\nconst PaghiperPix = {\n\tname: \"paghiper_pix\",\n\tlabel: <Label />,\n\tcontent: <Content gatewayName=\"paghiper_pix\" gatewayDescription={ pixSettings.description } />,\n\tedit: <Content gatewayName=\"paghiper_pix\" gatewayDescription={ pixSettings.description } />,\n\tcanMakePayment: () => true,\n\tariaLabel: label,\n\tpaymentMethodId: \"paghiper_pix\",\n\tsupports: {\n\t\tfeatures: pixSettings.supports,\n\t}\n}\n\nregisterPaymentMethod( PaghiperPix );\n\n// Billet\nconst billetSettings \t\t= getSetting( 'paghiper_billet_data', {} )\nconst defaultBilletLabel \t= __( 'Boleto Paghiper', 'woo-boleto-paghiper' )\nconst billetLabel \t\t\t= decodeEntities( billetSettings.title ) || defaultBilletLabel\n\nconst BilletLabel = ( props ) => {\n\tconst { PaymentMethodLabel } = props.components\n\treturn <PaymentMethodLabel text={ billetLabel } />\n}\n\nregisterPaymentMethod( {\n\tname: \"paghiper_billet\",\n\tlabel: <BilletLabel />,\n\tcontent: <Content gatewayName=\"paghiper_billet\" gatewayDescription={ billetSettings.description } />,\n\tedit: <Content gatewayName=\"paghiper_billet\" gatewayDescription={ billetSettings.description } />,\n\tcanMakePayment: () => true,\n\tariaLabel: billetLabel,\n\tsupports: {\n\t\tfeatures: billetSettings.supports,\n\t}\n} );"],"names":["__","useState","useEffect","useElementOptions","isCPF","isCNPJ","baseTextInputStyles","InlineTaxIdField","inputErrorComponent","ValidationInputError","onChange","gatewayName","isEmpty","setIsEmpty","isInvalid","setIsInvalid","isComplete","setIsComplete","fieldLabel","setFieldLabel","fieldInput","setFieldInput","options","isActive","isFocus","onActive","error","setError","hideIcon","errorCallback","event","message","empty","target","value","replace","length","taxIdMaskBehavior","val","e","jQuery","mask","onKeyPress","field","apply","arguments","console","log","createElement","Fragment","className","type","id","name","onBlur","onFocus","onInput","required","title","htmlFor","errorMessage","useCallback","getComputedStyle","selector","property","defaultValue","elementStyle","document","querySelector","window","element","elementOptions","style","base","iconColor","color","fontSize","lineHeight","classes","focus","invalid","overloadedOptions","setIsActive","setIsFocus","setOptions","prevOptions","showIcon","prevActive","registerPaymentMethod","decodeEntities","getSetting","pixSettings","defaultPixLabel","label","Content","props","eventRegistration","emitResponse","onPaymentSetup","taxID","setTaxID","payerName","setPayerName","unsubscribe","paghiperTaxId","paghiperTaxIdIsValid","paghiperTaxIdFieldName","responseTypes","SUCCESS","meta","paymentMethodData","ERROR","paymentEvent","gatewayDescription","Label","PaymentMethodLabel","components","text","PaghiperPix","content","description","edit","canMakePayment","ariaLabel","paymentMethodId","supports","features","billetSettings","defaultBilletLabel","billetLabel","BilletLabel"],"sourceRoot":""}